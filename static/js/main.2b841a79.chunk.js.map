{"version":3,"sources":["components/Products/ProductItem/index.tsx","components/Products/Products.tsx","components/Main/Main.tsx","App.tsx","index.tsx"],"names":["Container","styled","div","DescriptionContainer","ProductItem","name","price","quantity","clickHandler","onClick","TotalPriceContainer","Price","TotalPriceTitle","SubTitle","TableContainer","Products","products","productId","totalValue","reduce","sum","i","total","map","product","id","length","Title","ButtonsContainer","ButtonStyled","button","p","propColor","FormContainer","form","FormContainer1","InputContainer","InputStyled","input","Main","useState","setProducts","refreshList","setRefreshList","canClearCart","setCanClearCart","useForm","register","handleSubmit","reset","useEffect","localStorage","getItem","JSON","parse","checkList","list","onSubmit","data","productsList","productName","push","productPrice","productQuantity","setItem","stringify","e","console","log","autoComplete","placeholder","maxLength","type","autoFocus","ref","required","max","min","clear","splice","removeItem","App","Storage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b841a79.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  border: 1px solid black;\n  height: 30px;\n  &:hover {\n    background-color: palevioletred;\n    color: white;\n  }\n`;\n\nconst DescriptionContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 10px;\n  width: 100%;\n  font-family: \"Patrick Hand\", cursive;\n \n`;\n\ninterface ProductProps {\n  name: string;\n  price: number;\n  quantity: number | 1;\n  clickHandler: () => void;\n}\nconst ProductItem = ({ name, price, quantity, clickHandler }: ProductProps) => {\n  return (\n    <Container onClick={clickHandler}>\n      <DescriptionContainer>{name}</DescriptionContainer>\n      <DescriptionContainer>${price}</DescriptionContainer>\n      <DescriptionContainer>{quantity}</DescriptionContainer>\n      <DescriptionContainer>${price * quantity ?? 1}</DescriptionContainer>\n    </Container>\n  );\n};\n\nexport default ProductItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Product } from \"../Main/Main\";\nimport ProductItem from \"./ProductItem\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: white;\n`;\n\nconst TotalPriceContainer = styled.div`\n  display: flex;\n  margin-top: 20px;\n  align-items: center;\n  justify-content: center;\n  padding-right: 20px;\n  width: 100%;\n  heigth: 40px;\n`;\n\nconst Price = styled.div`\n  font-size: 20px;\n  justify-content: center;\n  font-family: \"Patrick Hand\", cursive;\n  color: red;\n`;\n\nconst TotalPriceTitle = styled.div`\n  font-family: \"Patrick Hand\", cursive;\n  font-size: 20px;\n`;\n\nconst SubTitle = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  margin: 10px;\n  width: 100%;\n`;\n\nconst TableContainer = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  background-color: gray;\n  border: 1px solid black;\n  height: 30px;\n`;\n\ninterface ProductsProps {\n  products: Product[];\n  productId: (id: number) => void;\n}\nconst Products = ({ products, productId }: ProductsProps) => {\n  const total = (products: Product[]) => {\n    return products.reduce((sum, i) => {\n      return sum + i.price * i.quantity;\n    }, 0);\n  };\n\n  const totalValue = total(products);\n\n  return (\n    <Container>\n      <TableContainer>\n        <SubTitle>product</SubTitle>\n        <SubTitle>price</SubTitle>\n        <SubTitle>quantity</SubTitle>\n        <SubTitle>subtotal</SubTitle>\n      </TableContainer>\n      {products.map((product, i) => {\n        return (\n          <ProductItem\n            key={product.id}\n            name={product.name}\n            price={product.price}\n            quantity={product.quantity}\n            clickHandler={() => {\n              productId(i);\n            }}\n          />\n        );\n      })}\n      {products.length === 0 && (\n        <TotalPriceContainer>\n          <TotalPriceTitle>\n            Insert a product to show on the list\n          </TotalPriceTitle>\n        </TotalPriceContainer>\n      )}\n      {totalValue > 0 && (\n        <TotalPriceContainer>\n          <TotalPriceTitle>Total Price=</TotalPriceTitle>\n          <Price>{` $${totalValue}`}</Price>\n        </TotalPriceContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default Products;\n","import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\n\nimport Products from \"../Products/Products\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: lightgrey;\n`;\n\nconst Title = styled.div`\n  font-family: \"Staatliches\", cursive;\n  font-size: 20px;\n  padding: 10px 10px;\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: flex-start;\n`;\n\nconst ButtonStyled = styled.button<{ propColor: string }>`\n  margin: 10px;\n  border: 2px solid ${(p) => p.propColor};\n  border-radius: 5px;\n  padding: 5px;\n  &:first-child {\n    margin-left: 0px;\n  }\n`;\n\nconst FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin: 0 10px;\n`;\n\nconst FormContainer1 = styled.div`\n  display: flex;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n`;\n\nconst InputStyled = styled.input`\n  padding: 5px;\n  font-size: 15px;\n  margin: 2px;\n  border: 1px solid gray;\n  border-radius: 5px;\n`;\n\nexport interface Product {\n  id: number;\n  name: string;\n  price: number;\n  quantity: number;\n}\n\nconst Main = () => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [refreshList, setRefreshList] = useState(false);\n  const [canClearCart, setCanClearCart] = useState(false);\n\n  const { register, handleSubmit, reset } = useForm();\n\n  useEffect(() => {\n    if (localStorage.getItem(\"products\") !== null) {\n      setProducts(JSON.parse(localStorage.getItem(\"products\") || \"\"));\n      setRefreshList(false);\n      setCanClearCart(true);\n    } else {\n      setProducts([]);\n      setRefreshList(false);\n    }\n  }, [refreshList]);\n\n  interface ProductForm {\n    productName: string;\n    productPrice: number;\n    productQuantity: number;\n  }\n  const onSubmit = (data: ProductForm) => {\n    const productsList: Product[] = products;\n    try {\n      if (!data.productName) {\n        return;\n      }\n      productsList.push({\n        id: products.length + 1,\n        name: data.productName,\n        price: data.productPrice || 0,\n        quantity: data.productQuantity || 1,\n      });\n      localStorage.setItem(\"products\", JSON.stringify(productsList));\n      checkList(products);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset();\n    }\n  };\n\n  const cleanCart = () => {\n    localStorage.clear();\n    setRefreshList(true);\n    setCanClearCart(false);\n  };\n\n  const removeItem = (id: number) => {\n    products.splice(id, 1);\n    const productsList: Product[] = products;\n    localStorage.setItem(\"products\", JSON.stringify(productsList));\n    checkList(products);\n  };\n\n  const checkList = (list: Product[]) => {\n    if (list.length === 0 || list === []) {\n      setCanClearCart(false);\n    }\n    setRefreshList(true);\n  };\n  // Get item\n  //const storage = () =>\n  //console.log(JSON.parse(localStorage.getItem(\"tasks\") || \"\"));\n  // Remove Item\n  // localStorage.removeItem('Key');\n\n  //Clear all items of localstorage\n  // localStorage.clear();\n\n  return (\n    <Container>\n      <Title>Shopping cart Manager</Title>\n      <FormContainer onSubmit={handleSubmit(onSubmit)}>\n        <FormContainer1>\n          <InputContainer>\n            <InputStyled\n              autoComplete=\"off\"\n              placeholder=\"* Product\"\n              maxLength={10}\n              type=\"text\"\n              name=\"productName\"\n              autoFocus\n              ref={register({ required: true })}\n            />\n          </InputContainer>\n          <InputContainer>\n            <InputStyled\n              autoComplete=\"off\"\n              placeholder=\"Price\"\n              max=\"9999\"\n              type=\"number\"\n              min=\"0\"\n              name=\"productPrice\"\n              ref={register}\n            />\n          </InputContainer>\n        </FormContainer1>\n        <InputStyled\n          autoComplete=\"off\"\n          placeholder=\"Quantity\"\n          type=\"number\"\n          min=\"0\"\n          max=\"9999\"\n          name=\"productQuantity\"\n          ref={register}\n        />\n        <ButtonsContainer>\n          <ButtonStyled propColor={\"green\"} type=\"submit\">\n            Add to cart\n          </ButtonStyled>\n          {canClearCart && (\n            <ButtonStyled propColor={\"red\"} onClick={() => cleanCart()}>\n              Clean cart list\n            </ButtonStyled>\n          )}\n        </ButtonsContainer>\n      </FormContainer>\n      <Products\n        products={products}\n        productId={(productId) => removeItem(productId)}\n      />\n    </Container>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./components/Main/Main\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nfunction App() {\n  if (typeof Storage !== \"undefined\") {\n    return (\n      <Container>\n        <Main />\n      </Container>\n    );\n  } else {\n    return (\n      <Container>Tu navegador no es compatible con LocalStorage</Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}